* BitSniff

As Bitcoin stubbornly continues to exist and gain traction, it also starts grabbing attention of those in charge. With censorship resistance being one of Bitcoin's key value propositions, the ability of third parties to establish who participates in this new economy may become a non-negligible issue. Imagine Bitcoin getting completely outlawed in China - being censored, or worse, is effectively a matter of being detectable.
Therefore, we must ask ourselves - who else knows you are using Bitcoin?

For most nodes in the network, the answer is "pretty much everyone", given that Bitcoin P2P communications aren't even encrypted and the same port is being used almost universally. But, arguably, most nodes in the network don't care much about being detected.
Now for those who do care, some steps are obvious - using VPN and running the node over Tor being the most obvious ones. We aim to show that it may not be enough, by implementing an attack that is able to detect Bitcoin communications by only using traffic volume over time - an information even most privacy concerned individuals are likely leaking to their law-abiding Internet Service Provider.

* Background

Every time you use a software that interacts with a Bitcoin network, you leave a sticky fingerprint in your traffic. It comes in a form of small, but unavoidable spike in volume after the new block is mined. The blocks in Bitcoin are quite big, and the propagation speed is critical for consensus (greater delay means more frequent accidental forks), so such effect is predictable, and, in a sense, inherent to Bitcoin architecture.
Notably, the volume of block-related messages drastically reduced since the introduction of Compact Block Relay (BIP 152). Instead of requesting whole blocks, mostly consisting of transactions already known to the node, the peer informed of a new block is only requesting the missing transactions. Yet the amount of excess communications in the seconds following a new block is still considerable.

/*
<https://raw.githubusercontent.com/bitcoin/bips/master/bip-0152/protocol-flow.png>
(Image taken from the BIP 152 page)
*/

This effect may not be noticeable for a single block, but over time it gets statistically significant, and may get exploited.

* Methodology

Our goal, given a time series of traffic volume over time, is to determine whether it tends to have larger volume just after the new block is found, during a window of typical propagation delay. We also aim to provide a meaningful metric measuring how confident we are that Bitcoin communications are, indeed, present.

/*
<diagram>
*/

1) An input file is parsed to create a target time series, aggregated in units of 1 second for further calculations speed-up.
2) Using the earliest timestamp and the length of the target, the actual block times during that window are fetched. Note that this information is public by design.
3) Block times are transformed into expected activity time series by adding bell-like shapes after block times, sized according to typical propagation delay.

We now have two time series, the target and the expected. The questions are:
 - How similar they are?
 - How confident we are that this level of similarity is not accidental?

4) To answer the first question, we calculate the correlation of the target and the expected. The problem is, the correlation is not a sufficient metric by itself, as what correlation we should consider meaningful depends on the shape of the traffic - e.g. 40% may be very significant for some traffic, and really low for other.
5) Fixing that requires us to generate a lot of fake expected time series that have, on average, the same number of blocks as actual one, and calculate the traffic correlation to every one of them. Those fakes are very similar to the expected activity, except one thing - the block times are wrong. If the target traffic is as similar to these as it is to real block times, this similarity is meaningless.
6) To determine that we calculate the z-score of the actual correlation compared to the fake ones - a measure of how far the actual correlation is from the fakes average, compared to how scattered the fakes tend to be. Intuitively, we now know not only how similar our traffic is to the expected Bitcoin activity - we also know how unlikely such similarity was to occur by chance.
7) Most people probably feel more comfortable with percentages than with z-scores, so we finish the process with approximating the corresponding percentage confidence level using Z table.

All that is left is to define a threshold for tagging a traffic as Bitcoin-related. There is no right value per se, and it can be determined empirically to achieve the desirable balance between true positive and false positive performance.

* Performance

The performance of the attack is a function of traffic length, with longer logs corresponding with better performance. For the ease of presentation, we used a single confidence threshold of 95%, preferring to err on the false negative side.
For the true positive estimation we used our own full node traffic, logged for 24 hours. Note that we did record on the 8333 port, so the results apply to dedicated nodes only. We will discuss mixed traffic in a later section.
For the false positive, there are infinitely many options. We mostly used, arguably, the 'hardest' one - the same actual full node traffic, but with shifted timestamps. We also added several Youtube logs of Khabib Nurmagomedov training. None of that did matter much as with a given threshold the false positive rate was, effectively, zero.

/*
Performance plot
*/

* Use cases

Other than raising privacy concerns for nodes operators, such an attack has a more marketable use - detecting illegal mining activity. Most mining software uses variations of Stratum protocol, that naturally has activity associated with new blocks on the underlying blockchain - the pool has to distribute a new block template for the miners, losing profits until it is done. One common case is Monero CPU malware, and other is gaining illicit access to electricity for Bitcoin mining. Currently, most antivirus software relies on binary signatures and known endpoints to detect mining malware, both of which can be tricked.

The attack can also be applied to many other blockchain-based currencies. Bitcoin forks with bigger blocks are an even easier target, and so are currencies with higher block density, such as Monero, Litecoin and Ethereum (assuming someone ever succeeds to run an Ethereum node).

* Protection

/* VPN
/* Tor
/* Mixing

* Aknowledgements

Our team (@79jke, @m417z) implemented BitSniff during the Bitcoin emBassy Hackathon 2019. 
- the attack idea
- the blog feedback
